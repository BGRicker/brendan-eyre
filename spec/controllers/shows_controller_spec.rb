require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ShowsController, type: :controller do
  let(:user) { create(:user) }
  
  let(:valid_attributes) {
    {
      dates: "2024-04-01",
      venue: "The Venue",
      location: "New York, NY",
      link: "http://example.com/show",
      note: "Great show!"
    }
  }

  let(:invalid_attributes) {
    {
      dates: nil,
      venue: nil,
      location: nil
    }
  }

  before { sign_in user }

  describe "GET #index" do
    it "returns a success response" do
      Show.create! valid_attributes.merge(user: user)
      get :index
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      show = Show.create! valid_attributes.merge(user: user)
      get :show, params: {id: show.to_param}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      show = Show.create! valid_attributes.merge(user: user)
      get :edit, params: {id: show.to_param}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Show" do
        expect {
          post :create, params: {show: valid_attributes}
        }.to change(Show, :count).by(1)
      end

      it "redirects to the created show" do
        post :create, params: {show: valid_attributes}
        expect(response).to redirect_to(Show.last)
      end
    end

    context "with invalid params" do
      it "returns unprocessable entity status" do
        post :create, params: {show: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          dates: "2024-04-02",
          venue: "Updated Venue",
          location: "Los Angeles, CA"
        }
      }

      it "updates the requested show" do
        show = Show.create! valid_attributes.merge(user: user)
        put :update, params: {id: show.to_param, show: new_attributes}
        show.reload
        expect(show.dates).to eq("2024-04-02")
        expect(show.venue).to eq("Updated Venue")
        expect(show.location).to eq("Los Angeles, CA")
      end

      it "redirects to the show" do
        show = Show.create! valid_attributes.merge(user: user)
        put :update, params: {id: show.to_param, show: valid_attributes}
        expect(response).to redirect_to(show)
      end
    end

    context "with invalid params" do
      it "returns unprocessable entity status" do
        show = Show.create! valid_attributes.merge(user: user)
        put :update, params: {id: show.to_param, show: invalid_attributes}
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested show" do
      show = Show.create! valid_attributes.merge(user: user)
      expect {
        delete :destroy, params: {id: show.to_param}
      }.to change(Show, :count).by(-1)
    end

    it "redirects to the shows list" do
      show = Show.create! valid_attributes.merge(user: user)
      delete :destroy, params: {id: show.to_param}
      expect(response).to redirect_to(shows_url)
    end
  end
end
